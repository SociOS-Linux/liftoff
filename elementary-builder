#!/bin/bash
set -e

# Target distribution
target_distro="$1"

# Target architectures
target_arch="$2"

# Load configuration
. /etc/elementary-builder/elementary-builder.conf

pbuilderrc="/etc/elementary-builder/pbuilderrc"

distro_to_codename() {
	echo "Determining distribution codename..."
	if [ "$target_distro" == "testing" ] ; then
		target_codename="$testing_codename"
	elif [ "$target_distro" == "unstable" ] ; then
		target_codename="$unstable_codename"
	elif [ "$target_distro" == "stable" ] ; then
		target_codename="$stable_codename"
	else
		target_codename="$target_distro"
	fi
	current_basetgz="/var/cache/elementary-builder"/"$target_codename"-"$target_arch"-base.tgz
	echo "Codename: "$target_codename""
}

setup_log_output() {
	echo "Setting up log output..."
	mkdir -p "$log_dir"
	timestamp=$(date +%Y-%m-%d-%H:%M:%S)
	log_file="$log_dir/$timestamp-$target_codename-$target_arch.log"
}

create_pbuilder_environment() {
	echo "Creating pbuilder environment..."
	#rm $current_basetgz # in case it's zero-size file leftover from a failed build
	sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ${keylist[@]}
	if [ "$aptcacherng_server" != "" ] ; then
		sudo DIST="$target_distro" ARCH="$target_arch" pbuilder --create \
			--architecture "$target_arch" \
			--distribution "$target_distro" \
			--configfile "$pbuilderrc" \
			--debootstrapopts --keyring=/etc/apt/trusted.gpg \
			--http-proxy "$aptcacherng_server"
	else
		sudo DIST="$target_distro" ARCH="$target_arch" pbuilder --create \
			--architecture "$target_arch" \
			--distribution "$target_distro" \
			--configfile "$pbuilderrc" \
			--debootstrapopts --keyring=/etc/apt/trusted.gpg
	fi
}

update_pbuilder_environment() {
	echo "Updating pbuilder environment..."
	sudo DIST="$target_distro" ARCH="$target_arch" pbuilder --update \
		--configfile "$pbuilderrc" \
		--override-config
}

build_product() {
	echo "Building..."
	setup_log_output
	build_result=$(mktemp -d)
	sudo DIST="$target_distro" ARCH="$target_arch" pdebuild --architecture "$target_arch" \
		--pbuilderroot "sudo DIST=$target_distro ARCH=$target_arch" \
		--buildresult "$build_result" \
		--configfile "$pbuilderrc" \
		--logfile "$log_file"
}

upload_product() {
	scp "$build_result"/*.deb "$remote_user"@"$remote_server":"$remote_repo_root"/incoming/"$target_codename"/"$target_arch"
}

cleanup() {
    echo "Cleaning up... (not really)"
#	sudo rm -rf "$build_result" "$chroot_script_file"
#	gzip "$log_file"
#	find "$log_dir" -mtime +30 -type f -delete # Delete logs older than 30 days
}

trap cleanup EXIT INT TERM

# Convert target_distro to target_codename
distro_to_codename

# Create environment if it doesn't exist otherwise just update it
if ( ! [ -e "$current_basetgz" ] || [ $(stat --format=%s "$current_basetgz") -eq 0 ] ); then
	create_pbuilder_environment
else
	update_pbuilder_environment
fi

build_product # Build

#upload_product # Upload
echo "This is where we would upload packages. IF WE HAD ANY!"

echo "Finished."
