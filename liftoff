#!/bin/bash
set -e

while getopts a:d:o: var; do
	case $var in
		a) arch="$OPTARG";;
		d) distro="$OPTARG";;
		o) output_dir="$OPTARG";;
	esac
done

# Passed to pbuilderrc
export DIST="$distro"
export ARCH="$arch"

pbuilderrc="/usr/lib/liftoff/pbuilderrc"

# Determine base path
case "$distro" in
	testing)
		export "$(grep TESTING_CODENAME= $pbuilderrc | tr -d '"')"
		basetgz="/var/cache/liftoff/$TESTING_CODENAME-${arch}-base.tgz"
		;;
	unstable)
		export "$(grep UNSTABLE_CODENAME= $pbuilderrc | tr -d '"')"
		basetgz="/var/cache/liftoff/$UNSTABLE_CODENAME-${arch}-base.tgz"
		;;
	stable)
		export "$(grep STABLE_CODENAME= $pbuilderrc | tr -d '"')"
		basetgz="/var/cache/liftoff/$STABLE_CODENAME-${arch}-base.tgz"
		;;
	*)
		basetgz="/var/cache/liftoff/$distro-${arch}-base.tgz"
		;;
esac

create_base() {
	echo "Creating pbuilder environment..."
	pbuilder create \
		--configfile "$pbuilderrc"
}

build_package() {
	pdebuild \
		--buildresult "$output_dir" \
		--configfile "$pbuilderrc"
}

print_debug() {
	echo "Architecture:  $arch"
	echo "Base:          $basetgz"
	echo "Distribution:  $distro"
}
#print_debug

# Create environment if it doesn't exist
if ! [ -e "$basetgz" ] || [ "$(stat --format=%s "$basetgz")" -eq 0 ]; then
	create_base
fi

build_package # Build
