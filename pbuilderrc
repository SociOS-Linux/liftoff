HOOKDIR="/etc/elementary-builder/hooks"
CACHEDIR="/var/cache/elementary-builder"

BUILDPLACE="$CACHEDIR"/build/

USEPROC=yes
USEDEVPTS=yes
USEDEVFS=no

EXTRAPACKAGES="apt-utils intltool"

# Remove potentially dangerous or undesirable packages like lilo
REMOVEPACKAGES="lilo"

# Make debconf not interact with user
export DEBIAN_FRONTEND="noninteractive"
DEBEMAIL="elementary Builds <builds@elementaryos.org>"

# For pbuilder debuild (sudo -E keeps the environment as-is)
BUILDSOURCEROOTCMD="fakeroot"
PBUILDERROOTCMD="sudo -E"

PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends"

# Command-line option passed on to dpkg-buildpackage.
DEBBUILDOPTS=""

# APT configuration files directory
APTCONFDIR=""

BINDMOUNTS=""

# the username and ID used by pbuilder, inside chroot. Needs fakeroot, really
BUILDUSERID=1234
BUILDUSERNAME=pbuilder

# Set the debootstrap variant to 'buildd' type.
DEBOOTSTRAPOPTS[0]='--variant=buildd'
# or work around bug in debootstrap 3.0.0 (314858)
# unset DEBOOTSTRAPOPTS

# Set the PATH to use inside pbuilder:
# default is "/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"

# SHELL variable is used inside pbuilder by commands like 'su';
# and they need sane values
export SHELL=/bin/bash

# The name of debootstrap command.
if [ "${ARCH}" = "armhf" ] ; then
	DEBOOTSTRAP="/usr/sbin/qemu-debootstrap"
else
	DEBOOTSTRAP="debootstrap"
fi

# Default file extension for pkgname-logfile
PKGNAME_LOGFILE_EXTENTION="_$(dpkg --print-architecture).build"

# Always run with --pkgname-logfile option, and create
# a logfile named after the package name.
PKGNAME_LOGFILE="yes"

# Fast gzip alternative
COMPRESSPROG=pigz

# Codenames for Debian suites according to their alias.
# Update these when needed.
UNSTABLE_CODENAME="sid"
TESTING_CODENAME="jessie"
STABLE_CODENAME="wheezy"

# List of Debian suites.
DEBIAN_SUITES=($UNSTABLE_CODENAME $TESTING_CODENAME $STABLE_CODENAME
    "unstable" "testing" "stable")

# List of Ubuntu suites. Update these when needed.
UBUNTU_SUITES=("precise" "trusty")

# Extra Ubuntu repositories
UBUNTU_SECURITY="deb http://archive.ubuntu.com/ubuntu $DIST-updates main"
UBUNTU_UPDATES="deb http://archive.ubuntu.com/ubuntu $DIST-security main"

# Mirrors
DEBIAN_MIRROR="ftp.us.debian.org"
if [ "${ARCH}" == "armhf" ]; then
    UBUNTU_MIRROR="ports.ubuntu.com/ubuntu-ports"
else
    UBUNTU_MIRROR="mirrors.advancedhosters.com/ubuntu"
fi

# Optionally change Debian release states in $DIST to their names.
case "$DIST" in
    unstable)
        DIST="$UNSTABLE_CODENAME"
        ;;
    testing)
        DIST="$TESTING_CODENAME"
        ;;
    stable)
        DIST="$STABLE_CODENAME"
        ;;
esac

NAME="$DIST"
if [ -n "${ARCH}" ]; then
    NAME="$NAME-$ARCH"
    DEBOOTSTRAPOPTS=("--arch" "$ARCH" "${DEBOOTSTRAPOPTS[@]}")
fi
BASETGZ="$CACHEDIR/$NAME-base.tgz"
# Optionally, set BASEPATH (and not BASETGZ) if using cowbuilder
# BASEPATH="$CACHEDIR/$NAME/base.cow/"

DISTRIBUTION="$DIST"

#BUILDRESULT=""$CACHEDIR"/$NAME/result/"

APTCACHE="$CACHEDIR/aptcache/$NAME/"

if $(echo ${DEBIAN_SUITES[@]} | grep -q $DIST); then
    # Debian configuration
    MIRRORSITE="http://$DEBIAN_MIRROR/debian/"
    COMPONENTS="main contrib non-free"
    OTHERMIRROR=""

elif $(echo ${UBUNTU_SUITES[@]} | grep -q $DIST); then
    # Ubuntu configuration
    MIRRORSITE="http://$UBUNTU_MIRROR"
    if [ "${ARCH}" = "amd64" ] || [ "${ARCH}" = "i386" ] ; then
        COMPONENTS="main restricted universe multiverse"
        OTHERMIRROR="$UBUNTU_SECURITY|$UBUNTU_UPDATES"
    fi

else
    echo "Unknown distribution: $DIST"
    exit 1
fi

# ccache
ENABLE_CCACHE=true

if [ "$ENABLE_CCACHE" = "true" ] ; then
    export CCACHE_DIR="/var/cache/pbuilder/ccache"
    export PATH="/usr/lib/ccache:${PATH}"
    sudo mkdir -p "$CCACHE_DIR"
    sudo chmod a+w "$CCACHE_DIR"
    sudo chown 1234.1234 "$CCACHE_DIR"
    BINDMOUNTS="$BINDMOUNTS ${CCACHE_DIR}"
fi

# Internal repository
INTERNAL_REPO="deb [trusted=yes] file:///home/cody/freight-repo $DIST main"
INTERNAL_REPO_MOUNTS="/home/cody/freight-repo"
ENABLE_INTERNAL_REPO=false

if [ "$ENABLE_INTERNAL_REPO" == "true" ] ;  then
    OTHERMIRROR="$OTHERMIRROR|$INTERNAL_REPO"
    BINDMOUNTS="$BINDMOUNTS $INTERNAL_REPO_MOUNTS"
fi

# External repository
EXTERNAL_REPO="deb [trusted=yes] http://192.168.1.114 $DIST main"
OTHERMIRROR="$OTHERMIRROR|$EXTERNAL_REPO"
ENABLE_INTERNAL_REPO=true

if [ "$ENABLE_EXTERNAL_REPO" == "true" ] ;  then
    OTHERMIRROR="$OTHERMIRROR|$EXTERNAL_REPO"
    BINDMOUNTS="$BINDMOUNTS $EXTERNAL_REPO_MOUNTS"
fi

# ppa:elementary-os/os-patches
OS_PATCHES="deb [trusted=yes] http://ppa.launchpad.net/elementary-os/os-patches/ubuntu $DIST main"

if [ "$DIST" == "trusty" ] ; then
    OTHERMIRROR="$OTHERMIRROR|$OS_PATCHES"
fi
