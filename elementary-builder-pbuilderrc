CACHEDIR="/var/cache/elementary-builder"

BUILDPLACE="$CACHEDIR"/build/

USEPROC=yes
USEDEVPTS=yes
USEDEVFS=no

REMOVEPACKAGES="lilo"
HOOKDIR="/usr/lib/pbuilder/hooks"

# Make debconf not interact with user
export DEBIAN_FRONTEND="noninteractive"
DEBEMAIL="elementary Builds <builds@elementaryos.org>"

# For pbuilder debuild (sudo -E keeps the environment as-is)
BUILDSOURCEROOTCMD="fakeroot"
PBUILDERROOTCMD="sudo -E"

PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends"

# Command-line option passed on to dpkg-buildpackage.
DEBBUILDOPTS=""

# APT configuration files directory
APTCONFDIR=""

# the username and ID used by pbuilder, inside chroot. Needs fakeroot, really
BUILDUSERID=1234
BUILDUSERNAME=pbuilder

# OTHERMIRROR="deb file:///var/cache/pbuilder/repo ./"
# BINDMOUNTS is a space separated list of things to mount
# inside the chroot.
# BINDMOUNTS="/var/cache/pbuilder/repo"

# Set the debootstrap variant to 'buildd' type.
DEBOOTSTRAPOPTS[0]='--variant=buildd'
# or work around bug in debootstrap 3.0.0 (314858)
# unset DEBOOTSTRAPOPTS

# Set the PATH I am going to use inside pbuilder: default is "/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"

# SHELL variable is used inside pbuilder by commands like 'su'; and they need sane values
export SHELL=/bin/bash

# The name of debootstrap command.
DEBOOTSTRAP="debootstrap"

# Default file extension for pkgname-logfile
PKGNAME_LOGFILE_EXTENTION="_$(dpkg --print-architecture).build"

# Default PKGNAME_LOGFILE
PKGNAME_LOGFILE=""

# Fast gzip alternative
COMPRESSPROG=pigz

# Codenames for Debian suites according to their alias.
# Update these when needed.
UNSTABLE_CODENAME="sid"
TESTING_CODENAME="wheezy"
STABLE_CODENAME="squeeze"
STABLE_BACKPORTS_SUITE="$STABLE_CODENAME-backports"

# List of Debian suites.
DEBIAN_SUITES=($UNSTABLE_CODENAME $TESTING_CODENAME $STABLE_CODENAME
    "unstable" "testing" "stable")

# List of Ubuntu suites. Update these when needed.
UBUNTU_SUITES=("precise" "raring" "saucy")

# Mirrors
DEBIAN_MIRROR="ftp.us.debian.org"
if [ $(dpkg --print-architecture) == "armhf" ]; then
    UBUNTU_MIRROR="ports.ubuntu.com/ubuntu-ports"
else
    UBUNTU_MIRROR="us.archive.ubuntu.com/ubuntu"
fi

# Optionally use the changelog of a package to determine the suite to use if
# none set.
if [ -z "${DIST}" ] && [ -r "debian/changelog" ]; then
    DIST=$(dpkg-parsechangelog | awk '/^Distribution: / {print $2}')
    # Use the unstable suite for certain suite values.
    if $(echo "experimental UNRELEASED" | grep -q $DIST); then
        DIST="$UNSTABLE_CODENAME"
    fi
fi

# Optionally set a default distribution if none is used.
# Note that you can set your own default (i.e. ${DIST:="unstable"}).
: ${DIST:="$(lsb_release --short --codename)"}

# Optionally change Debian release states in $DIST to their names.
case "$DIST" in
    unstable)
        DIST="$UNSTABLE_CODENAME"
        ;;
    testing)
        DIST="$TESTING_CODENAME"
        ;;
    stable)
        DIST="$STABLE_CODENAME"
        ;;
esac

# Optionally set the architecture to the host architecture if none set.
# Note that you can set your own default (i.e. ${ARCH:="i386"}).
: ${ARCH:="$(dpkg --print-architecture)"}

NAME="$DIST"
if [ -n "${ARCH}" ]; then
    NAME="$NAME-$ARCH"
    DEBOOTSTRAPOPTS=("--arch" "$ARCH" "${DEBOOTSTRAPOPTS[@]}")
fi
BASETGZ=""$CACHEDIR"/$NAME-base.tgz"
# Optionally, set BASEPATH (and not BASETGZ) if using cowbuilder
# BASEPATH=""$CACHEDIR"/$NAME/base.cow/"

DISTRIBUTION="$DIST"

BUILDRESULT=""$CACHEDIR"/$NAME/result/"

APTCACHE=""$CACHEDIR"/aptcache/$NAME/"

if $(echo ${DEBIAN_SUITES[@]} | grep -q $DIST); then
    # Debian configuration
    MIRRORSITE="http://$DEBIAN_MIRROR/debian/"
    COMPONENTS="main contrib non-free"
    # This is for enabling backports for the Debian stable suite.
    # if $(echo "$STABLE_CODENAME stable" | grep -q $DIST); then
    #    EXTRAPACKAGES="$EXTRAPACKAGES debian-backports-keyring"
    #    OTHERMIRROR="$OTHERMIRROR | deb http://www.backports.org/debian $STABLE_BACKPORTS_SUITE $COMPONENTS"
    # fi
elif $(echo ${UBUNTU_SUITES[@]} | grep -q $DIST); then
    # Ubuntu configuration
    MIRRORSITE="http://$UBUNTU_MIRROR"
    COMPONENTS="main restricted universe multiverse"
#   OTHERMIRROR="deb http://ppa.launchpad.net/vala-team/ppa/ubuntu $DIST main"

else
    echo "Unknown distribution: $DIST"
    exit 1
fi
